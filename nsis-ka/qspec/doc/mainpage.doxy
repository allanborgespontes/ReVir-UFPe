/**

@mainpage

This is an implementation of the QoS-NSLP QSPEC Template
(QSPEC-T). It is based on a draft developed by the
<a href="http://www.ietf-nsis.org">IETF NSIS Working Group</a>.


@section architecture The Architecture 

The QSPEC-T provides a common language for Quality of Service
Specifications (<em>QSPEC</em>s).

A QSPEC consists of one or more <em>QSPEC Objects</em>. Each QSPEC Object has
a Type (like Qos Reserved, QoS Desired, etc.) and may appear only once per
QSPEC.

A QSPEC Object consists of <em>QSPEC Parameters</em> (like Bandwidth,
Token Bucket etc.). The QSPEC-T defines several parameters; each
parameter has a unique ID and may appear only once per QSPEC Object.

This implementation provides classes for all those entities mentioned above.

The QSPEC itself is implemented by the
@link qspec::qspec_pdu qspec_pdu @endlink class,
all QSPEC Objects by the @link qspec::qspec_object qspec_object @endlink
class and all QSPEC Parameters by subclasses of
@link qspec::qspec_param qspec_param@endlink.

For deserializing to work, those classes, including all parameters
expected to appear in a QSPEC, have to be registered with
@link qspec::QSPEC_IEManager QSPEC_IEManager@endlink. This manager
acts as a registry that maps protocol values (like QSPEC Parameter IDs)
to the classes implementing them.

@section Examples

See the following examples on how to use this library in your own applications.
First of all a minimal Makefile:

@include Makefile

This one writes a QSPEC:

@include write_qspec.cpp

The following reads a QSPEC:

@include read_qspec.cpp

*/
